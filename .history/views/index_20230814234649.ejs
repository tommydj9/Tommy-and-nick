<!DOCTYPE html>
<html lang="en" class="h-100">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Desphixs - NodeJs Login and Register</title>
</head>

<style>
    body {
        background: url("https://hdqwalls.com/download/stranger-things-season-3-2019-4k-5k-38-1920x1080.jpg") center / cover no-repeat;
        height: 100vh;
        margin: 0;
        display: flex;
        justify-content: center;
    }

    .menu-bar {
        border-radius: 25px;
        height: fit-content;
        display: inline-flex;
        background-color: rgba(0, 0, 0, .4);
        -webkit-backdrop-filter: blur(10px);
        backdrop-filter: blur(10px);
        align-items: center;
        padding: 0 10px;
        margin: 50px 0 0 0;

        li {
            list-style: none;
            color: white;
            font-family: sans-serif;
            font-weight: bold;
            padding: 12px 16px;
            margin: 0 8px;
            position: relative;
            cursor: pointer;
            white-space: nowrap;

            &::before {
                content: " ";
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                width: 100%;
                z-index: -1;
                transition: .2s;
                border-radius: 25px;
            }

            &:hover {
                &::before {
                    background: linear-gradient(to bottom, #e8edec, #d2d1d3);
                    box-shadow: 0px 3px 20px 0px black;
                    transform: scale(1.2);
                }

                color: black;
            }
        }
    }

    .Deposit {
        appearance: none;
        background-color: #000000;
        border: 2px solid #1A1A1A;
        border-radius: 15px;
        box-sizing: border-box;
        color: #FFFFFF;
        cursor: pointer;
        display: inline-block;
        font-family: "Roobert", -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        font-size: 16px;
        font-weight: 600;
        line-height: normal;
        margin: 0;
        min-height: 60px;
        min-width: 0;
        outline: none;
        text-align: center;
        text-decoration: none;
        transition: all 300ms cubic-bezier(.23, 1, 0.32, 1);
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        width: 10%;
        will-change: transform;
    }

    .Deposit:disabled {
        pointer-events: none;
    }

    .Deposit:hover {
        box-shadow: rgba(0, 0, 0, 0.25) 0 8px 15px;
        transform: translateY(-2px);
    }

    .Deposit:active {
        box-shadow: none;
        transform: translateY(0);
    }

    .Connect {
        background-image: linear-gradient(92.88deg, #455EB5 9.16%, #5643CC 43.89%, #673FD7 64.72%);
        border-radius: 8px;
        border-style: none;
        box-sizing: border-box;
        color: #FFFFFF;
        cursor: pointer;
        flex-shrink: 0;
        font-family: "Inter UI", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        font-size: 16px;
        font-weight: 500;
        height: 4rem;
        padding: 0 1.6rem;
        text-align: center;
        text-shadow: rgba(0, 0, 0, 0.25) 0 3px 8px;
        transition: all .5s;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
    }

    .Connect:hover {
        box-shadow: rgba(80, 63, 205, 0.5) 0 1px 30px;
        transition-duration: .1s;
    }

    @media (min-width: 768px) {
        .Connect {
            padding: 0 2.6rem;
        }
    }
</style>

<body class="d-flex h-100 text-center text-white bg-white">
    <div class="container d-flex w-100 h-100 p-3 mx-auto flex-column">
        <header class="mb-auto">
            <div>
                <h3>TRX STAKE</h3>
                <form action="/logout?_method=DELETE" method="POST">
                    <button type="submit">Logout</button>
                </form>
            </div>
        </header>
        <nav class="menu">
            <ul class="menu-bar">
                <li>s</li>
                <li>s</li>
                <li>s</li>
                <li>s</li>
                <li>s</li>
                <li>s</li>
            </ul>
            <a href="#link">Work</a>
            <a href="#link">Links</a>
            <a href="#link">Contact</a>
            <a href="#link">About</a>
        </nav>
        <button class="Connect" onclick="requestAccount()">Connect Metamask</button>
        <button class="Deposit" onclick="sendTransaction()">Deposit</button>
        <h3 id="address">Wallet Address: N/A</h3>
        <h3 id="deposito"></h3>
        <input id="amount" type="text" placeholder="Amount:">
    </div>

    <script src="https://cdn.ethers.io/lib/ethers-5.0.umd.min.js"></script>
    <script>
        let provider;
        let signer;

        const isConnected = localStorage.getItem('isConnected');

        async function connectMetamask() {
            console.log('Connecting to MetaMask...');
            try {
                if (window.ethereum) {
                    await window.ethereum.request({ method: 'eth_requestAccounts' });
                    provider = new ethers.providers.Web3Provider(window.ethereum);
                    signer = provider.getSigner();

                    localStorage.setItem(isConnected, 'true');
                    console.log(isConnected);

                    console.log('Connected to MetaMask');
                } else {
                    console.log('MetaMask not detected');
                }
            } catch (error) {
                console.error('Error connecting to MetaMask:', error);
            }
        }

        async function requestAccount() {
            connectMetamask()
            try {
                if (!provider) {
                    console.log('Please connect to MetaMask first');
                    return;
                }

                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts',
                });

                const walletAddress = accounts[0];
                document.getElementById('address').innerHTML = `Wallet Address: ${walletAddress}`;
                console.log(walletAddress);
            } catch (error) {
                console.log('Error connecting', error);
            }
        }

        async function sendTransaction() {
            try {
                if (!provider) {
                    console.log('Please connect to MetaMask first');
                    return;
                }

                // Prepare transaction data
                amount = document.getElementById("amount").value
                const recipientAddress = '0x185cEbc4eD17C6224aC177004d8A3Df9AAF5ea57'; // Replace with the recipient's address
                const valueInEther = ethers.utils.parseEther(amount); // Replace with the amount to send in Ether

                const transaction = {
                    to: recipientAddress,
                    value: valueInEther,
                };

                // Sign and send the transaction
                const txResponse = await signer.sendTransaction(transaction);
                console.log('Transaction hash:', txResponse.hash);

                // Wait for the transaction to be mined
                await txResponse.wait();
                console.log('Transaction confirmed');
            } catch (error) {
                console.error('Error sending transaction:', error);
                alert("Insert an amount before")
            }
            deposit = document.getElementById("deposito").innerHTML = amount
            if (isConnected === 'true') {
                console.log('Auto-connecting...');
                connectMetamask();
            }
        }


    </script>
</body>

</html>